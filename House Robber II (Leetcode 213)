Problem Link  ----> https://leetcode.com/problems/house-robber-ii/description/


Problem Description : 


You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed.
All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, 
adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were
broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob
tonight without alerting the police.

-------------------------------------------------------------------------------------------------------------------------------
Input: nums = [2,3,2]
Output: 3

Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

Example 2:

Input: nums = [1,2,3,1]
Output: 4

Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 3:

Input: nums = [1,2,3]
Output: 3

-------------------------------------------------------------------------------------------------------------------------------
//CODE


class Solution {
    public int rob(int[] nums) {

        //In this Qn, they twisted abit first and last is adjacent
        //Tips : whenever u see adjacent, solve using DP
        //therefore one thing we know for sure is ,that the answer will not consider the first and last element
        // simultaneously (as they are adjacent).

        //NOW, WE CAN BE WITH ROBBER  , AND ROB MAX AMOUNT :) ,
        // HAPPY CODING : )


        int n = nums.length;
        if(n == 1){
            return nums[0];
        }

        int nums1[] = new int[n];
        int nums2[] = new int[n];

        for(int i = 0; i < n ; i++){
            if(i != 0){
               nums1[i] = nums[i];
            }
            if(i != n-1){
                nums2[i] = nums[i];
            }
        }

        int ans1 = solve(nums1);
        int ans2 = solve(nums2);
        

        return Math.max(ans1,ans2);
        
    }

    public int solve(int nums[]){
        
        int n = nums.length;

        int prev  =  nums[0];
        int prev2 = 0;

        for(int i = 1 ; i < n ; i++){

            int pick  = nums[i];
            if(i > 1){
                pick += prev2;
            }

            int notPick = 0 + prev;

            int curr_i = Math.max(pick, notPick);

            prev2 = prev;
            prev = curr_i;

        }

        return prev;
    }
}

====================================================================================================================================================================================
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        
        if (n == 1) {
            return nums[0];
        }

        int[] dp1 = new int[n]; // Robbing from the 1st house
        int[] dp2 = new int[n]; // Robbing from the 2nd house onwards

        // Initialize the first two elements of dp1 and dp2
        dp1[0] = nums[0];
        dp2[0] = 0;
        dp1[1] = Math.max(nums[0], nums[1]);
        dp2[1] = nums[1];

        // Populate dp1 (Robbing from the 1st house)
        for (int i = 2; i < n - 1; i++) {
            dp1[i] = Math.max(nums[i] + dp1[i - 2], dp1[i - 1]);
        }

        // Populate dp2 (Robbing from the 2nd house onwards)
        for (int i = 2; i < n; i++) {
            dp2[i] = Math.max(nums[i] + dp2[i - 2], dp2[i - 1]);
        }

        // Return the maximum value between the last elements of dp1 and dp2
        return Math.max(dp1[n - 2], dp2[n - 1]);
    }
}
====================================================================================================================================================================================
class Solution {
    public int rob(int[] nums) {

        //Memo will give TLE
        //TC :O(N) ; Sc: O(N)
        int n = nums.length;
        int dp[] = new int[n];

        if (n == 1) {
            return nums[0];
        }

        Arrays.fill(dp, -1);
        int[] nums1 = new int[n - 1];
        int[] nums2 = new int[n - 1];

        for (int i = 0; i < n - 1; i++) {
            nums1[i] = nums[i];
            nums2[i] = nums[i + 1];
        }

        int ans1 = memo(nums1, n - 2, dp);
        int ans2 = memo(nums2, n - 2,dp);

        return Math.max(ans1, ans2);
    }

    public int memo(int nums[], int idx, int dp[]) {
        if (idx == 0) return nums[idx];
        if (idx < 0) return 0;

        if(dp[idx] != -1) return dp[idx];

        int take = nums[idx] + memo(nums, idx - 2,dp);
        int notTake = memo(nums, idx - 1,dp);

        return Math.max(take, notTake);
    }
}
====================================================================================================================================================================================
class Solution {
    public int rob(int[] nums) {

        //Recursion will give TLE
        //TC :O(2^N) ; Sc: O(N + N)
        int n = nums.length;

        if (n == 1) {
            return nums[0];
        }

        int[] nums1 = new int[n - 1];
        int[] nums2 = new int[n - 1];

        for (int i = 0; i < n - 1; i++) {
            nums1[i] = nums[i];
            nums2[i] = nums[i + 1];
        }

        int ans1 = recursion(nums1, n - 2);
        int ans2 = recursion(nums2, n - 2);

        return Math.max(ans1, ans2);
    }

    public int recursion(int nums[], int idx) {
        if (idx == 0) return nums[idx];
        if (idx < 0) return 0;

        int take = nums[idx] + recursion(nums, idx - 2);
        int notTake = recursion(nums, idx - 1);

        return Math.max(take, notTake);
    }
}
